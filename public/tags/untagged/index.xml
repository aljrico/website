<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Alejandro J Rico</title>
    <link>https://aljrico.com/tags/untagged/</link>
    <description>Recent content in untagged on Alejandro J Rico</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 07 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aljrico.com/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Efficient Column Looping with R</title>
      <link>https://aljrico.com/posts/2020/06/efficient-column-looping-with-r/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aljrico.com/posts/2020/06/efficient-column-looping-with-r/</guid>
      <description>I’d bet most R developers have - or will have - faced the issue of having to optimise a big piece of code. Some processes might take way too much time, or they are filling memory space until the session explodes and everything crashes.
One of the most infamous caveats of programming with R is how slow it can be to loop through columns of a data.frame. It has been widely discussed and everyone knows that you shouldn’t use a for loop to iterate a function over many columns, you should use the apply() family for that.</description>
    </item>
    
  </channel>
</rss>